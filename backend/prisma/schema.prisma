generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/* ===== Enum de roles en venta ===== */
enum PapelEnVenta {
  CREADOR
  CAJERO
  ANULADOR
  EDITOR
}

/* ===== Usuario y roles globales ===== */
model Usuario {
  idUsuario         Int       @id @default(autoincrement()) @db.Integer
  nombreUsuario     String    @db.VarChar(100)
  emailUsuario      String    @unique @db.VarChar(320)
  contrasenaUsuario String    @map("contraseñaUsuario") @db.VarChar(100)
  createdAt         DateTime  @default(now())

  roles          UsuarioRol[]
  ventasCreadas  Venta[]        @relation("UsuarioCreador")
  ventasActor    VentaActor[]
  eventosVenta   VentaEvento[]
  comentarios    VentaComentario[]

  @@map("Usuario")
}

model Rol {
  idRol      Int          @id @default(autoincrement())
  nombreRol  String       @unique
  comentario String?
  usuarios   UsuarioRol[]

  @@map("Rol")
}

model UsuarioRol {
  idUsuario Int
  idRol     Int

  Usuario Usuario @relation(fields: [idUsuario], references: [idUsuario], onDelete: Cascade)
  Rol     Rol     @relation(fields: [idRol], references: [idRol], onDelete: Restrict)

  @@id([idUsuario, idRol])
  @@map("UsuarioRol")
}

/* ===== Clientes ===== */
model TipoCliente {
  idTipoCliente Int    @id @default(autoincrement()) @db.Integer
  tipoCliente   String @db.VarChar(100)
  clientes Cliente[]

  @@map("TipoCliente")
}

model NivelCliente {
  idNivelCliente  Int @id @default(autoincrement()) @db.Integer
  indiceBeneficio Int
  clientes Cliente[]

  @@map("NivelCliente")
}

model Provincia {
  idProvincia     Int    @id @default(autoincrement()) @db.Integer
  nombreProvincia String @db.Char(100)
  localidades Localidad[]

  @@map("Provincia")
}

model Localidad {
  idLocalidad     Int       @id @default(autoincrement()) @db.Integer
  nombreLocalidad String    @db.Char(100)
  idProvincia     Int
  Provincia       Provincia @relation(fields: [idProvincia], references: [idProvincia])
  clientes    Cliente[]
  proveedores Proveedor[]

  @@unique([idProvincia, nombreLocalidad])
  @@map("Localidad")
}

model Cliente {
  idCliente       Int      @id @default(autoincrement()) @db.Integer
  nombreCliente   String   @db.VarChar(100)
  apellidoCliente String   @db.VarChar(100)
  cuil            BigInt?
  emailCliente    String   @db.VarChar(100)
  telefonoCliente BigInt?
  observacion     String?  @db.Text
  fechaRegistro   DateTime @default(now())
  idTipoCliente   Int?
  idNivelCliente  Int?
  idLocalidad     Int?
  TipoCliente  TipoCliente?  @relation(fields: [idTipoCliente], references: [idTipoCliente])
  NivelCliente NivelCliente? @relation(fields: [idNivelCliente], references: [idNivelCliente])
  Localidad    Localidad?    @relation(fields: [idLocalidad], references: [idLocalidad])
  ventas Venta[]

  @@map("Cliente")
}

/* ===== Catálogo ===== */
model Familia {
  idFamilia   Int          @id @default(autoincrement()) @db.Integer
  tipoFamilia String       @unique @db.Char(100)
  subFamilias SubFamilia[]
  @@map("Familia")
}

model SubFamilia {
  idSubFamilia   Int        @id @default(autoincrement()) @db.Integer
  tipoSubFamilia String     @db.Char(100)
  idFamilia      Int
  Familia        Familia    @relation(fields: [idFamilia], references: [idFamilia])
  productos      Producto[]

  @@unique([idFamilia, tipoSubFamilia])
  @@map("SubFamilia")
}

model Producto {
  idProducto                 Int     @id @default(autoincrement()) @db.Integer
  codigoBarrasProducto       BigInt? @unique
  codigoProducto             String  @unique @db.VarChar(50)
  nombreProducto             String  @db.VarChar(100)
  descripcionProducto        String? @db.Text
  ofertaProducto             Boolean @default(false)
  precioProducto             Decimal @db.Decimal(12, 2)
  precioVentaPublicoProducto Decimal @db.Decimal(12, 2)
  utilidadProducto           Decimal @db.Decimal(7, 2)
  idUsuario                  Int?
  idSubFamilia               Int
  SubFamilia SubFamilia @relation(fields: [idSubFamilia], references: [idSubFamilia])
  stocks             Stock[]
  proveedorProductos ProveedorProducto[]
  detalleCompras     DetalleCompra[]
  detalleVentas      DetalleVenta[]

  @@map("Producto")
}

/* ===== Stock con campos nuevos ===== */
model Stock {
  idStock                 Int      @id @default(autoincrement()) @db.Integer
  idProducto              Int      @unique
  bajoMinimoStock         Decimal  @db.Decimal(12, 2)
  cantidadRealStock       Decimal  @db.Decimal(12, 2)
  stockComprometido       Decimal  @default(0) @db.Decimal(12, 2)
  ultimaModificacionStock DateTime @default(now())
  Producto Producto @relation(fields: [idProducto], references: [idProducto])
  @@map("Stock")
}

/* Vista sólo lectura para stockDisponible */
model VwStock {
  idProducto          Int
  cantidadRealStock   Decimal @db.Decimal(12, 2)
  stockComprometido   Decimal @db.Decimal(12, 2)
  stockDisponible     Decimal @db.Decimal(12, 2)
  @@ignore
}

/* ===== Proveedores y compras ===== */
model Proveedor {
  idProveedor          Int     @id @default(autoincrement()) @db.Integer
  CIF_NIFProveedor     BigInt?
  nombreProveedor      String  @db.VarChar(100)
  mailProveedor        String? @db.VarChar(100)
  telefonoProveedor    BigInt?
  observacionProveedor String? @db.Text
  idLocalidad          Int?
  Localidad Localidad? @relation(fields: [idLocalidad], references: [idLocalidad], onDelete: SetNull, onUpdate: Cascade)
  proveedorProductos ProveedorProducto[]
  compras Compra[]
  @@map("Proveedor")
}

model ProveedorProducto {
  idProveedorProducto     Int      @id @default(autoincrement()) @db.Integer
  idProveedor             Int
  idProducto              Int
  codigoArticuloProveedor String   @db.VarChar(50)
  fechaIngreso            DateTime @db.Date
  precioHistorico         Decimal  @db.Decimal(12, 2)
  Proveedor Proveedor @relation(fields: [idProveedor], references: [idProveedor])
  Producto  Producto  @relation(fields: [idProducto], references: [idProducto])
  @@map("ProveedorProducto")
}

model MetodoPago {
  idMetodoPago Int     @id @default(autoincrement()) @db.Integer
  metodoPago   String? @db.Char(100)
  compras Compra[]
  @@map("MetodoPago")
}

model Moneda {
  idMoneda Int     @id @default(autoincrement()) @db.Integer
  moneda   String  @db.VarChar(50)
  precio   Decimal @db.Decimal(12, 4)
  compras Compra[]
  ventas  Venta[]
  @@map("Moneda")
}

model Compra {
  idCompra               Int      @id @default(autoincrement()) @db.Integer
  fechaComprobanteCompra DateTime @db.Date
  nroFactura             Int
  observacion            String   @db.Char(255)
  idProveedor            Int?
  idMetodoPago           Int
  idMoneda               Int
  Proveedor  Proveedor? @relation(fields: [idProveedor], references: [idProveedor], onDelete: SetNull, onUpdate: Cascade)
  MetodoPago MetodoPago @relation(fields: [idMetodoPago], references: [idMetodoPago])
  Moneda     Moneda     @relation(fields: [idMoneda], references: [idMoneda])
  detalles DetalleCompra[]
  @@map("Compra")
}

model DetalleCompra {
  idDetalleCompra Int     @id @default(autoincrement()) @db.Integer
  idCompra        Int
  idProducto      Int
  cantidad        Decimal @db.Decimal(12, 2)
  Compra   Compra   @relation(fields: [idCompra], references: [idCompra])
  Producto Producto @relation(fields: [idProducto], references: [idProducto])
  @@map("DetalleCompra")
}

/* ===== Ventas ===== */
model TipoPago {
  idTipoPago Int      @id @default(autoincrement()) @db.Integer
  tipoPago   String   @db.Char(100)
  recargo    Decimal? @db.Decimal(6, 2)
  ventas Venta[]
  @@map("TipoPago")
}

model EstadoVenta {
  idEstadoVenta     Int    @id @default(autoincrement()) @db.Integer
  nombreEstadoVenta String @db.VarChar(100)
  ventas       Venta[]
  eventosDesde VentaEvento[] @relation("EventoDesde")
  eventosHasta VentaEvento[] @relation("EventoHasta")
  @@map("EstadoVenta")
}

model Venta {
  idVenta         Int      @id @default(autoincrement()) @db.Integer
  fechaVenta      DateTime @db.Date
  fechaCobroVenta DateTime @db.Date
  observacion     String?  @db.Text
  idCliente       Int
  idEstadoVenta   Int
  idTipoPago      Int
  idMoneda        Int
  idUsuario       Int?
  Cliente     Cliente     @relation(fields: [idCliente], references: [idCliente])
  EstadoVenta EstadoVenta @relation(fields: [idEstadoVenta], references: [idEstadoVenta])
  TipoPago    TipoPago    @relation(fields: [idTipoPago], references: [idTipoPago])
  Moneda      Moneda      @relation(fields: [idMoneda], references: [idMoneda])
  Usuario     Usuario?    @relation("UsuarioCreador", fields: [idUsuario], references: [idUsuario])
  detalles     DetalleVenta[]
  actores      VentaActor[]
  eventos      VentaEvento[]
  comentarios  VentaComentario[]
  @@map("Venta")
}

model DetalleVenta {
  idDetalleVenta Int     @id @default(autoincrement()) @db.Integer
  idVenta        Int
  idProducto     Int
  cantidad       Decimal @db.Decimal(12, 2)
  Venta    Venta    @relation(fields: [idVenta], references: [idVenta])
  Producto Producto @relation(fields: [idProducto], references: [idProducto])
  @@map("DetalleVenta")
}

/* ===== Tablas de auditoría ===== */
model VentaActor {
  idVenta   Int
  idUsuario Int
  papel     PapelEnVenta
  createdAt DateTime @default(now())
  Venta   Venta   @relation(fields: [idVenta], references: [idVenta])
  Usuario Usuario @relation(fields: [idUsuario], references: [idUsuario])
  @@id([idVenta, idUsuario, papel])
  @@map("VentaActor")
}

model VentaEvento {
  idVentaEvento Int      @id @default(autoincrement()) @db.Integer
  idVenta       Int
  idUsuario     Int
  estadoDesde   Int?
  estadoHasta   Int
  motivo        String?  @db.Text
  createdAt     DateTime @default(now())
  Venta   Venta   @relation(fields: [idVenta], references: [idVenta])
  Usuario Usuario @relation(fields: [idUsuario], references: [idUsuario])
  EstadoDesde EstadoVenta? @relation("EventoDesde", fields: [estadoDesde], references: [idEstadoVenta])
  EstadoHasta EstadoVenta  @relation("EventoHasta", fields: [estadoHasta], references: [idEstadoVenta])
  @@map("VentaEvento")
}

model VentaComentario {
  idVentaComentario Int      @id @default(autoincrement()) @db.Integer
  idVenta           Int
  idUsuario         Int
  comentario        String   @db.Text
  createdAt         DateTime @default(now())
  Venta   Venta   @relation(fields: [idVenta], references: [idVenta])
  Usuario Usuario @relation(fields: [idUsuario], references: [idUsuario])
  @@map("VentaComentario")
}
